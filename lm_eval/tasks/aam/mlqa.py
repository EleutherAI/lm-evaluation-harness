from functools import partial
from lm_eval.base import rf, Task
from ..squad import _squad_agg


"""
MLQA: Evaluating Cross-lingual Extractive Question Answering
https://arxiv.org/abs/1910.07475

@article{DBLP:journals/corr/abs-1910-07475,
  author    = {Patrick S. H. Lewis and
               Barlas Oguz and
               Ruty Rinott and
               Sebastian Riedel and
               Holger Schwenk},
  title     = {{MLQA:} Evaluating Cross-lingual Extractive Question Answering},
  journal   = {CoRR},
  volume    = {abs/1910.07475},
  year      = {2019},
  url       = {http://arxiv.org/abs/1910.07475},
  eprinttype = {arXiv},
  eprint    = {1910.07475},
  timestamp = {Tue, 21 Jan 2020 08:54:02 +0100},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1910-07475.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
"""


class MLQABase(Task):
    VERSION = 0
    DATASET_PATH = "mlqa"

    def has_training_docs(self):
        return False

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return True

    def training_docs(self):
        if self.has_training_docs():
            # We cache training documents in `self._training_docs` for faster
            # few-shot processing. If the data is too large to fit in memory,
            # return the training data as a generator instead of a list.
            if self._training_docs is None:
                # TODO: Return the training document generator from `self.dataset`.
                # If you need to process the data, `map` over the documents with
                # the custom processing function, `self._process_doc`. E.g.
                # `map(self._process_doc, self.dataset["validation"])`
                # In most case you can leave this as is unless the dataset split is
                # named differently than the default `"train"`.
                self._training_docs = list(self.dataset["train"])
            return self._training_docs

    def validation_docs(self):
        if self.has_validation_docs():
            # TODO: Return the validation document generator from `self.dataset`.
            # If you need to process the data, `map` over the documents with the
            # custom processing function, `self._process_doc`. E.g.
            # `map(self._process_doc, self.dataset["validation"])`
            # In most case you can leave this as is unless the dataset split is
            # named differently than the default `"validation"`.
            return self.dataset["validation"]

    def test_docs(self):
        if self.has_test_docs():
            # TODO: Return the test document generator from `self.dataset`.
            # If you need to process the data, `map` over the documents with the
            # custom processing function, `self._process_doc`. E.g.
            # `map(self._process_doc, self.dataset["test"])`
            # In most case you can leave this as is unless the dataset split is
            # named differently than the default `"test"`.
            return self.dataset["test"]

    def doc_to_target(self, doc):
        answer_list = doc["answers"]["text"]
        answer = answer_list[0]
        return " " + answer

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        continuation = rf.greedy_until(ctx, ["\n"])
        return continuation

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        continuation = results

        predictions = {
            "id": doc["id"],
            "prediction_text": continuation,
            "no_answer_probability": 0,  # dummy, this dataset has no unsanwerable questions
        }

        references = {
            "id": doc["id"],
            "answers": doc["answers"],
        }

        return {
            "exact": (
                predictions,
                references,
            ),  # Exact match (the normalized answer exactly match the gold answer)
            "f1": (
                predictions,
                references,
            ),
        }

    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metrics
        """
        return {
            "exact": partial(
                _squad_agg, "exact"
            ),  # Exact match (the normalized answer exactly match the gold answer)
            "f1": partial(
                _squad_agg, "f1"
            ),  #  The F-score of predicted tokens versus the gold answer
        }

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are
            whether a higher value of the submetric is better
        """
        return {
            "exact": True,  # Exact match (the normalized answer exactly match the gold answer)
            "f1": True,  #  The F-score of predicted tokens versus the gold answer
        }

class MLQADe(MLQABase):
    DATASET_NAME = "mlqa.de.de"

    def fewshot_description(self):
        return ""

    def doc_to_text(self, doc):
        return (
            "Kontext: "
            + doc["context"]
            + "\n\n"
            + "Frage: "
            + doc["question"]
            + "\n\n"
            + "Antwort:"
        )

class MLQAEs(MLQABase):
    DATASET_NAME = "mlqa.es.es"

    def fewshot_description(self):
        return ""

    def doc_to_text(self, doc):
        return (
            "Contexto: "
            + doc["context"]
            + "\n\n"
            + "Pregunta: "
            + doc["question"]
            + "\n\n"
            + "Respuesta:"
        )

class MLQAEn(MLQABase):
    DATASET_NAME = "mlqa.en.en"

    def fewshot_description(self):
        return ""

    def doc_to_text(self, doc):
        return (
            "Context: "
            + doc["context"]
            + "\n\n"
            + "Question: "
            + doc["question"]
            + "\n\n"
            + "Response:"
        )

class MLQAEnDe(MLQABase):
    DATASET_NAME = "mlqa.en.de"

    def fewshot_description(self):
        return ""

    def doc_to_text(self, doc):
        return (
            "Context: "
            + doc["context"]
            + "\n\n"
            + "Question: "
            + doc["question"]
            + "\n\n"
            + "Response:"
        )

class MLQADeEn(MLQABase):
    DATASET_NAME = "mlqa.de.en"

    def fewshot_description(self):
        return ""

    def doc_to_text(self, doc):
        return (
            "Context: "
            + doc["context"]
            + "\n\n"
            + "Question: "
            + doc["question"]
            + "\n\n"
            + "Response:"
        )
