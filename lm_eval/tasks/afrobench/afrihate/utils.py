import argparse

import yaml



class FunctionTag:
    def __init__(self, value):
        self.value = value



def gen_lang_yamls(output_dir: str, overwrite: bool, mode: str) -> None:
    """
    Generate a yaml file for each language.

    :param output_dir: The directory to output the files to.
    :param overwrite: Whether to overwrite files if they already exist.
    """
    err = []
    languages = [
        "amh",
        "arq",
        "ary",
        "hau",
        "ibo",
        "kin",
        "orm",
        "pcm",
        "som",
        "swa",
        "tir",
        "twi",
        "xho",
        "yor",
        "zul",
    ]
    for lang in languages:
        try:
            file_name = f"afrihate_{mode}_{lang}.yaml"
            task_name = f"afrihate_{mode}_{lang}"
            yaml_template = f"afrihate_{mode}_yaml"
            with open(
                f"{output_dir}/{file_name}",
                "w" if overwrite else "x",
                encoding="utf8",
            ) as f:
                f.write("# Generated by utils.py\n")
                yaml.dump(
                    {
                        "include": yaml_template,
                        "task": task_name,
                        "dataset_name": lang,
                    },
                    f,
                    allow_unicode=True,
                )
        except FileExistsError:
            err.append(file_name)

    if len(err) > 0:
        raise FileExistsError(
            "Files were not created because they already exist (use --overwrite flag):"
            f" {', '.join(err)}"
        )


def main() -> None:
    """Parse CLI args and generate language-specific yaml files."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--overwrite",
        default=True,
        action="store_true",
        help="Overwrite files if they already exist",
    )
    parser.add_argument(
        "--output-dir",
        default="./template",
        help="Directory to write yaml files to",
    )
    parser.add_argument(
        "--mode",
        default="template",
        choices=["template1", "template2", "template3", "template4", "template5"],
        help="Mode of chain-of-thought",
    )
    args = parser.parse_args()

    gen_lang_yamls(output_dir=args.output_dir, overwrite=args.overwrite, mode=args.mode)


if __name__ == "__main__":
    main()
