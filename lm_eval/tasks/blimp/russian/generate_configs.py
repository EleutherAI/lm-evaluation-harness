import yaml


all_subtasks = [
    "add_new_suffix",
    "add_verb_prefix",
    "adposition_government",
    "anaphor_agreement_gender",
    "anaphor_agreement_number",
    "change_declension_ending",
    "change_declension_ending_has_dep",
    "change_duration_aspect",
    "change_repetition_aspect",
    "change_verb_conjugation",
    "change_verb_prefixes_order",
    "clause_subj_predicate_agreement_gender",
    "clause_subj_predicate_agreement_number",
    "clause_subj_predicate_agreement_person",
    "conj_verb_tense",
    "deontic_imperative_aspect",
    "external_possessor",
    "floating_quantifier_agreement_case",
    "floating_quantifier_agreement_gender",
    "floating_quantifier_agreement_number",
    "genitive_subj_predicate_agreement_gender",
    "genitive_subj_predicate_agreement_number",
    "genitive_subj_predicate_agreement_person",
    "indefinite_pronoun_to_negative",
    "negative_concord",
    "negative_pronoun_to_indefinite",
    "nominalization_case",
    "noun_subj_predicate_agreement_gender",
    "noun_subj_predicate_agreement_number",
    "noun_subj_predicate_agreement_person",
    "np_agreement_case",
    "np_agreement_gender",
    "np_agreement_number",
    "single_verb_tense",
    "subj_predicate_agreement_gender_attractor",
    "subj_predicate_agreement_number_attractor",
    "tense_marker",
    "transitive_verb",
    "transitive_verb_iobject",
    "transitive_verb_object",
    "transitive_verb_passive",
    "transitive_verb_subject",
    "verb_acc_object",
    "verb_gen_object",
    "verb_ins_object",
]


def main() -> None:
    for task in all_subtasks:
        file_name = f"{task}.yaml"
        try:
            with open(f"{file_name}", "w", encoding="utf-8") as f:
                f.write("# Generated by generate_configs.py\n")
                yaml.dump(
                    {
                        "include": "_template_yaml",
                        "task": "rublimp_" + task,
                        "dataset_name": task,
                    },
                    f,
                )
        except FileExistsError:
            pass


if __name__ == "__main__":
    main()
