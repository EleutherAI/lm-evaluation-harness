"""
LILA: A Unified Benchmark for Mathematical Reasoning
https://aclanthology.org/2022.emnlp-main.392.pdf

Given a natural language problem specification x, the task is to generate
a program y that upon execution returns the correct answer to x.

Homepage: https://github.com/allenai/lila
"""
import re
from io import StringIO
from contextlib import redirect_stdout

from lm_eval.metrics import mean
from lm_eval.base import Task, rf


_CITATION = """
@inproceedings{mishra2022lila,
  author = {
    Swaroop Mishra 
      and Matthew Finlayson 
      and Pan Lu 
      and Leonard Tang 
      and Sean Welleck 
      and Chitta Baral 
      and Tanmay Rajpurohit 
      and Oyvind Tafjord 
      and Ashish Sabharwal 
      and Peter Clark 
      and Ashwin Kalyan},
  title = {Lila: A Unified Benchmark for Mathematical Reasoning},
  booktitle = {Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing (EMNLP)},
  year = {2022}
}
"""


class Lila(Task):
    VERSION = 0
    DATASET_PATH = "allenai/lila"
    DATASET_NAME = "iid"

    def has_training_docs(self):
        return True

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return True

    def training_docs(self):
        if self.has_training_docs():
            if self._training_docs is None:
                self._training_docs = list(self.dataset["train"])
            return self._training_docs

    def validation_docs(self):
        if self.has_validation_docs():
            return self.dataset["dev"]

    def test_docs(self):
        if self.has_test_docs():
            return self.dataset["test"]

    def doc_to_text(self, doc):
        text = "Question: " + doc["input"] + "\n\n" + "Program:\n" + "```python\n"
        return text

    def doc_to_target(self, doc):
        target = doc["output_program"] + "\n```"
        return target

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or
            test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        output = rf.greedy_until(ctx, "``")
        return output

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        true_answer = doc['output_answer']
        program = self._parse_result(results[0])  # TODO multiple results
        correct, ran, _, _ = Lila.evaluate(program, true_answer)
        return {
            "acc": correct,
            "ran": ran
        }

    def aggregation(self):
        """
        :returns: {str: [metric_score] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metric scores
        """
        return {
            "acc": mean,
            "ran": mean
        }

    def higher_is_better(self):
        return {
            "acc": True,
            "ran": True
        }

    def _parse_result(self, result):
        program = result.strip()
        return program

    @staticmethod
    def _run(program):
        f = StringIO()
        msg = {}
        with redirect_stdout(f):
            try:
                exec(program)
                answer = f.getvalue().strip()
                ran = True
            except Exception as e:
                answer = 'FAILED'
                msg = {
                    'type': str(type(e)),
                    'exception': str(e)
                }
                ran = False
        return answer, ran, msg

    @staticmethod
    def _parse_float(text):
        """Converts `text` according to the following precedence:
            1. convert with `float()`
            2. find exactly one integer or float via regex
            3. return the original `text` string
        """
        text = text.strip().replace(',', '')
        try:
            answer = float(text)
            return answer
        except:
            rx = re.compile(r'(-?\d+\.?\d*)')
            matches = rx.findall(text)
            if len(matches) == 1:
                try:
                    answer = float(matches[0])
                    return answer
                except:
                    return matches[0]
        return text

    @staticmethod
    def evaluate(text, true_answer):
        answer, ran, msg = Lila._run(text)
        try:
            correct = Lila._parse_float(true_answer) == Lila._parse_float(answer)
        except:
            correct = False
        correct = float(correct)
        return correct, ran, answer, msg


class LilaAddSub(Lila):
    VERSION = 0
    DATASET_NAME = 'addsub'
