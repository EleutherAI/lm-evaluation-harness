dataset_path: TIGER-Lab/MMLU-Pro
test_split: test
fewshot_split: validation
fewshot_config:
  sampler: first_n
  doc_to_text: !function utils.fewshot_to_text
  doc_to_target: ""
output_type: generate_until
doc_to_text: !function utils.doc_to_text
doc_to_target: answer
filter_list:
  # - name: "custom-extract"
  #   filter:
  #     - function: "regex"
  #       regex_pattern: 'answer is \(?([ABCDEFGHIJ])\)?'
  #       # regex_pattern: r".*[aA]nswer:\s*([A-J])",
  #     - function: "take_first"
  - name: "extract-answer"
    filter:
      - function: "regex"
        group_select: -1 # takes last match
        regex_pattern: '(?i)^\s*[\(\[\{"]?\s*(?P<lead_letter>[ABCD])\s*[\)\]\}"]?(?=[\s:)\].,;!?-]|$)|(?:^|[^\w])(?:the\s+)?answer(?:\s+is)?\s*[:\-]?(?:(?P<answer_letter>[ABCD])\b|(?P<answer_fallback>[^\n\r]+?))\s*$'  # Prefer a leading, standalone letter like "B: ...", "(C) ...", etc., otherwise, look for the 'answer' token and take Aâ€“D if present, else capture whatever comes after it as a fallback.
      - function: "take_first"
generation_kwargs:
  until:
    - "</s>"
    - "Question:"
    - "<|im_end|>"
  max_gen_toks: 2048
  do_sample: false
  temperature: 0.0
num_fewshot: 5
metric_list:
  - metric: exact_match
    aggregation: mean
    higher_is_better: true
    ignore_case: true
    ignore_punctuation: true
metadata:
  version: 2.1
