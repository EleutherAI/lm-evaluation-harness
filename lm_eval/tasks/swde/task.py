"""
Know What You Donâ€™t Know: Unanswerable Questions for SQuAD
https://arxiv.org/pdf/1806.03822.pdf

Stanford Question Answering Dataset (SQuAD) is a reading comprehension dataset,
consisting of questions posed by crowdworkers on a set of Wikipedia articles,
where the answer to every question is a segment of text, or span, from the
corresponding reading passage, or the question might be unanswerable.
SQuAD2.0 combines the 100,000 questions in SQuAD1.1 with over 50,000 unanswerable
questions written adversarially by crowdworkers to look similar to answerable ones.
To do well on SQuAD2.0, systems must not only answer questions when possible, but
also determine when no answer is supported by the paragraph and abstain from answering.

Homepage: https://rajpurkar.github.io/SQuAD-explorer/
"""
from typing import List
import datasets

from math import exp
from functools import partial
import re
import numpy as np

from lm_eval.api.task import ConfigurableTask
from lm_eval.api.instance import Instance


class SWDE(ConfigurableTask):
    VERSION = 0
    DATASET_PATH = "hazyresearch/based-swde"
    DATASET_NAME = "based-swde"

    def __init__(self):
        super().__init__(config={'metadata': {'version': self.VERSION}})


    def has_training_docs(self):
        return False

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return False

    def validation_docs(self):
        return self.dataset["validation"]

    def doc_to_text(self, doc):
        return doc["text"]

    def doc_to_target(self, doc):
        return doc["value"]
        
    def construct_requests(self, doc, ctx, **kwargs):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """

        return [
            Instance(
                request_type="generate_until",
                doc=doc,
                arguments=(ctx, {"until": ["\n"], "max_gen_toks": 48}),
                idx=0,
                **kwargs,
            )
        ]

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        # continuation, (logprob_unanswerable, _) = results
        continuation = results

        return {
            "contains": contains_score(continuation[0], [doc["value"]])
        }

    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metrics
        """
        return {
            "contains": np.mean,  # Exact match (the normalized answer exactly match the gold answer)
            # "f1": partial(
            #     _squad_agg, "f1"
            # ),  # The F-score of predicted tokens versus the gold answer
            # "HasAns_exact": partial(
            #     _squad_agg, "HasAns_exact"
            # ),  # Exact match (the normalized answer exactly match the gold answer)
            # "HasAns_f1": partial(
            #     _squad_agg, "HasAns_f1"
            # ),  # The F-score of predicted tokens versus the gold answer
            # "NoAns_exact": partial(
            #     _squad_agg, "NoAns_exact"
            # ),  # Exact match (the normalized answer exactly match the gold answer)
            # "NoAns_f1": partial(
            #     _squad_agg, "NoAns_f1"
            # ),  # The F-score of predicted tokens versus the gold answer
            # "best_exact": partial(
            #     _squad_agg, "best_exact"
            # ),  # Best exact match (with varying threshold)
            # "best_f1": partial(
            #     _squad_agg, "best_f1"
            # ),  # Best F1 (with varying threshold)
        }

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are
            whether a higher value of the submetric is better
        """
        return {
            "contains": True,  # Exact match (the normalized answer exactly match the gold answer
        }
    

def contains_score(prediction: str, labels: List[str]):
    return max(
        int(bool(re.search(re.compile(re.escape(label), re.IGNORECASE), prediction)))
        for label in labels
    )
